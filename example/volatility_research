#!/usr/bin/env ruby

require 'bundler/setup'
require 'ib-ruby'

=begin
Discover properties of Options

IB provides two calculations: :RequestOptionPrice and :RequestImpliedVolatility

ib.send_message :RequestOptionPrice
-----------------------------------
Given a valid option-contract, a fair option-price is calculated using appropiate 
Underlying-price (:under_price) and :volatility-input-values

In addition, the »greeks« and the incorporated dividend are provided by the tws

ib.send_message :RequestImpliedVolatility
-----------------------------------------
Instead of :volatility, the  :option_price is used as input. 

Both requests are answered by a :TickOption-Message and are thus easily displayed by
(in console)
 C.send_message :RequestImpliedVolatility, contract: IB::Symbols::Options.aapl200, under_price: 180, option_price: 11.3 
 => 8673   # returns the request_id
C.received[:TickOption].to_human
 => ["<TickOption cust_option_computation for ticker_id: underlying @ 180.0, option @ 11.3, IV 0.16260792724594816%, delta -2.0, gamma -2.0, vega -2.0, theta -2.0, pv_dividend -1.0>"]
...(greeks: -2.0  indicates, that IB has not jet calculated anything, but the IV is there ) 

=end


# First, connect to IB TWS and subscribe for events. 
ib = IB::Connection.new :client_id => 1112  do | gw | #, :port => 7497 # TWS

	# Subscribe to TWS alerts/errors
	gw.subscribe(:Alert) { |msg| puts msg.to_human }
	# Set log level
	gw.logger.level = Logger::FATAL # DEBUG  -- INFO -- WARN -- ERROR  -- FATAL
end

	# We use OptionPriceCalculations provided by IB
	# specify the Option
	the_option = IB::Symbols::Options.aapl200

	# specify the desired Volatility-Range
	vola_range = ( 2 .. 50 ) # in % p.a.

	# get the prices and store in recieved-array
	vola_range.each do | the_vola |
		req_id = ib.send_message :RequestOptionPrice, 
															contract: the_option,
															volatility: the_vola.to_f/100,
															under_price: 180
		sleep 0.2
		print the_vola.to_s+" % "
		ib.wait_for :TickOption
		ib.send_message :CancelOptionPrice, id: req_id
	end
	print "\n"
	# the output 
	puts "BASE:  #{the_option.to_human}"
	puts '-'*66
	puts  "Vola   --->  Option-Price   ||  Gamma   Delta    Theta    Vega "
	puts '-'*66
	vola_range.each_with_index do |vola, i|
		record = ib.received[:TickOption][i]
		print " %3d %%  --->  %6.3f  " % [vola, record.option_price]
    print "greeks :" + "%6.3f   %6.3f   %6.3f   %6.3f" % [ record.gamma, record.delta, record.theta, record.vega ]
		print "\n"
	end

